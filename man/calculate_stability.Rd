% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluate-clusters.R
\name{calculate_stability}
\alias{calculate_stability}
\title{Calculate cluster stability using the Adjusted Rand Index (ARI)}
\usage{
calculate_stability(
  x,
  cluster_df,
  cluster_col = "cluster",
  cell_id_col = "cell_id",
  replicates = 20,
  seed = NULL,
  pc_name = NULL,
  warnings = FALSE,
  ...
)
}
\arguments{
\item{x}{An object containing PCs that clusters were calculated from. This can be
either a SingleCellExperiment object, a Seurat object, or a matrix where columns
are PCs and rows are cells. If a matrix is provided, it must have row names of cell
ids (e.g., barcodes).}

\item{cluster_df}{A data frame that contains at least two columns: one representing
unique cell ids, and one containing cluster assignments. By default, these columns
should be named `cell_id` and `cluster` respectively, though this can be customized.
The cell id column's values should match either the PC matrix row names, or the
SingleCellExperiment/Seurat object cell ids. Typically this data frame will be
output from the `rOpenScPCA::calculate_clusters()` function.}

\item{cluster_col}{The name of the column in `cluster_df` which contains cluster
assignments. The default is "cluster".}

\item{cell_id_col}{The name of the column in `cluster_df` which contains unique cell
ids. The default is "cell_id".}

\item{replicates}{Number of bootstrap replicates to perform. Default is 20.}

\item{seed}{Random seed}

\item{pc_name}{Optionally, the name of the PC matrix in the object. Not used if a
matrix is provided. If the name is not provided, the name "PCA" is used for
SingleCellExperiment objects, and "pca" for Seurat objects.}

\item{warnings}{Whether warnings related to distance ties when calculating bootstrap
clusters should be printed. Default is FALSE.}

\item{...}{Additional arguments to pass to `calculate_clusters()` which calculates
bootstrapped clusters. Usually, these will be the same arguments used to generate
the original clusters.}
}
\value{
Data frame with columns `replicate` and `ari`, representing the given bootstrap replicate
  and its ARI value, respectively, and columns representing clustering algorithm parameters which
  include at least `algorithm`, `weighting`, and `nn`. Louvain and leiden clustering will also
  include `resolution`, and leiden clustering will further include `objective_function`.
}
\description{
This function generates and clusters, using provided parameters, bootstrap
replicates calculates the Adjusted Rand Index (ARI) between each set of bootstrapped
clusters and the original provided clusters. ARI measures similarity between different
cluster results, where a value of 0 indicates an entirely random relationship between
results, and a value of 1 indicates perfect agreement.
}
\details{
When assessing stability, you should specify the same clustering parameters here as
were used to calculate the original clusters.

Note that this function will also make use of bluster::clusterRows() with the
bluster::NNGraphParam() function on a principal components matrix. Note that defaults
for some arguments may differ from the bluster::NNGraphParam() defaults.
Specifically, the clustering algorithm defaults to "louvain" and the weighting scheme
to "jaccard" to align with common practice in scRNA-seq analysis.
}
\examples{
\dontrun{

# First, cluster PCs from a SingleCellExperiment object using default parameters
# and setting a seed for reproducibility
cluster_df <- calculate_clusters(sce_object, seed = 11)
# Second, calculate cluster stability using default parameters
stability_df <- calculate_stability(sce_object, cluster_df, seed = 11)


# First, cluster PCs from a SingleCellExperiment object using default parameters
# and setting a seed for reproducibility
cluster_df <- calculate_clusters(sce_object, seed = 11)
# Second, calculate cluster stability using default parameters and 50 replicates
stability_df <- calculate_stability(
  sce_object,
  cluster_df,
  replicates = 50,
  seed = 11
)


# First, cluster PCs from a SingleCellExperiment object using the leiden
# algorithm and a resolution of 0.1
cluster_df <- calculate_clusters(
  sce_object,
  algorithm = "leiden",
  resolution = 0.1,
  seed = 11
)
# Second, calculate cluster stability using the same parameters as were used
# for the initial clustering
stability_df <- calculate_stability(
  sce_object,
  cluster_df,
  algorithm = "leiden",
  resolution = 0.1,
  seed = 11
)
}
}
